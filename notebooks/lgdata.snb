{
  "metadata" : {
    "name" : "lgdata",
    "user_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "CC35D7BC14164BC4965235A97B98F156"
    },
    "cell_type" : "markdown",
    "source" : "#LG Data\nExtract data from limitless garden server via API (https: lg.dokku.abarbanell.de) and analyse with spark.\n\n## API\nthe API is still work in progress (https:github.com/abarbanell/limitless-garden) and not all necessary API calls are yet available. \n\nThe following API is new and working, but not much data points yet: \n\n- GET /api/sensors/\n- GET /api/sensors/:id\n\nThe following API calls are not yet available: \n\n- GET /api/sensors/:id/data\n\nWe do have the old collection API\n\n- GET /api/collections/sensor (with paging and offset), only this call has currently data.\n\nAuthentication: you need an user_key which you can retrieve from threescale, but we have baked a demo key in here which allows a restriced amount of calls per minute (approx 10/min). In development we can bypass the authentication with the magit API key \"true\", but this only works in dev.\n\n"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1C6B5A49D1B643D1839CF6DC84083A77"
    },
    "cell_type" : "code",
    "source" : "// this userKey is rate-limited\nval userKey = \"6ed4688d8d487a95f4aec4f2136b04ae\"\nval baseHost = \"http://lg.dokku.abarbanell.de\"\nval baseUrl = \"/api/collections/sensor\"\nval queryString = \"?user_key=\" + userKey\nval fullUrl = baseHost + baseUrl  + queryString\nval lgDataDir = \"lg.d\"\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "userKey: String = 6ed4688d8d487a95f4aec4f2136b04ae\nbaseHost: String = http://lg.dokku.abarbanell.de\nbaseUrl: String = /api/collections/sensor\nqueryString: String = ?user_key=6ed4688d8d487a95f4aec4f2136b04ae\nfullUrl: String = http://lg.dokku.abarbanell.de/api/collections/sensor?user_key=6ed4688d8d487a95f4aec4f2136b04ae\nlgDataDir: String = lg.d\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 37,
      "time" : "Took: 522 milliseconds, at 2017-1-25 13:36"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E8072DFD201342FE810E0B3423FBE3DE"
    },
    "cell_type" : "code",
    "source" : "// this gets a file from url and saves as text\ndef getFileFromURL (url:String, dir:String) : Boolean = {\n  println(\"get from url: \"+ url)\n  val hadoopConf = sc.hadoopConfiguration\n  val fs = org.apache.hadoop.fs.FileSystem.get(hadoopConf)\n  if (fs.exists(new org.apache.hadoop.fs.Path(dir))) {\n    return true\n  } else {\n    val str = scala.io.Source.fromURL(url).mkString\n    val list = str.split(\"\\n\").filter(_ != \"\")\n    println(list.toString())\n    val rdds = sc.parallelize(list)\n    rdds.saveAsTextFile(dir)\n    return true\n  }\n  return false\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "getFileFromURL: (url: String, dir: String)Boolean\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 38,
      "time" : "Took: 584 milliseconds, at 2017-1-25 13:36"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4D1100BA256748FA8030202E184F52CD"
    },
    "cell_type" : "code",
    "source" : "def deleteFile(dir: String): Boolean = {\n  println(\"delete data dir: \"+ dir)\n  val hc = sc.hadoopConfiguration\n  val fs = org.apache.hadoop.fs.FileSystem.get(hc)\n  val p = new org.apache.hadoop.fs.Path(dir)\n  if (fs.exists(p)) {\n    fs.delete(p,true)\n    return true \n  } else { \n    return false\n  }\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "deleteFile: (dir: String)Boolean\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 39,
      "time" : "Took: 553 milliseconds, at 2017-1-25 13:36"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "output_stream_collapsed" : true,
      "collapsed" : false,
      "id" : "A5DAB7255E7042A2AC4C6CCE4D831828"
    },
    "cell_type" : "code",
    "source" : "deleteFile(lgDataDir)\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "delete data dir: lg.d\nres55: Boolean = true\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "true"
      },
      "output_type" : "execute_result",
      "execution_count" : 40,
      "time" : "Took: 910 milliseconds, at 2017-1-25 13:37"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0CD08C60D4094D9987335B928949A06C"
    },
    "cell_type" : "code",
    "source" : "// need to handle API key and faival src = getFileFromURL(fullUrl, lgdataDir)\ngetFileFromURL(fullUrl, lgDataDir)\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "get from url: http://lg.dokku.abarbanell.de/api/collections/sensor?user_key=6ed4688d8d487a95f4aec4f2136b04ae\n[Ljava.lang.String;@2f566464\nres57: Boolean = true\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "true"
      },
      "output_type" : "execute_result",
      "execution_count" : 41,
      "time" : "Took: 1 second 100 milliseconds, at 2017-1-25 13:37"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "81FEB979E19445308A39C38539824992"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}